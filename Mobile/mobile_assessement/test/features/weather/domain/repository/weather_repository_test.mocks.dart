// Mocks generated by Mockito 5.4.1 from annotations
// in mobile_assessement/test/features/weather/domain/repository/weather_repository_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mobile_assessement/features/weather/data/datasources/local_datasources.dart'
    as _i3;
import 'package:mobile_assessement/features/weather/data/datasources/remote_datasource.dart'
    as _i5;
import 'package:mobile_assessement/features/weather/data/model/weather_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWeatherModel_0 extends _i1.SmartFake implements _i2.WeatherModel {
  _FakeWeatherModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherLocalDataSource extends _i1.Mock
    implements _i3.WeatherLocalDataSource {
  MockWeatherLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> addFavoriteCity(String? city) => (super.noSuchMethod(
        Invocation.method(
          #addFavoriteCity,
          [city],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> removeFavoriteCity(String? city) => (super.noSuchMethod(
        Invocation.method(
          #removeFavoriteCity,
          [city],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<List<String>> getFavoriteCities() => (super.noSuchMethod(
        Invocation.method(
          #getFavoriteCities,
          [],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);
  @override
  _i4.Future<void> cacheWeatherData(_i2.WeatherModel? weather) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheWeatherData,
          [weather],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i2.WeatherModel> getCachedWeatherData(String? city) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedWeatherData,
          [city],
        ),
        returnValue: _i4.Future<_i2.WeatherModel>.value(_FakeWeatherModel_0(
          this,
          Invocation.method(
            #getCachedWeatherData,
            [city],
          ),
        )),
      ) as _i4.Future<_i2.WeatherModel>);
}

/// A class which mocks [WeatherRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRemoteDataSource extends _i1.Mock
    implements _i5.WeatherRemoteDataSource {
  MockWeatherRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: '',
      ) as String);
  @override
  String get apiKey => (super.noSuchMethod(
        Invocation.getter(#apiKey),
        returnValue: '',
      ) as String);
  @override
  _i4.Future<_i2.WeatherModel> getWeatherForCity(String? city) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeatherForCity,
          [city],
        ),
        returnValue: _i4.Future<_i2.WeatherModel>.value(_FakeWeatherModel_0(
          this,
          Invocation.method(
            #getWeatherForCity,
            [city],
          ),
        )),
      ) as _i4.Future<_i2.WeatherModel>);
}
