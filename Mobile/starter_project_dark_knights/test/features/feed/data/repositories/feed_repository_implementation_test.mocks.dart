// Mocks generated by Mockito 5.4.0 from annotations
// in dark_knights/test/features/feed/data/repositories/feed_repository_implementation.test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:dark_knights/features/article/data/models/article_model.dart'
    as _i4;
import 'package:dark_knights/features/feeds/data/datasources/feed_remote_data_source.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FeedRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeedRemoteDataSource extends _i1.Mock
    implements _i2.FeedRemoteDataSource {
  MockFeedRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.ArticleModel>> getArticles() => (super.noSuchMethod(
        Invocation.method(
          #getArticles,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.ArticleModel>>.value(<_i4.ArticleModel>[]),
      ) as _i3.Future<List<_i4.ArticleModel>>);
  @override
  _i3.Future<List<_i4.ArticleModel>> searchArticles(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchArticles,
          [query],
        ),
        returnValue:
            _i3.Future<List<_i4.ArticleModel>>.value(<_i4.ArticleModel>[]),
      ) as _i3.Future<List<_i4.ArticleModel>>);
  @override
  _i3.Future<List<_i4.ArticleModel>> filterArticles(String? tag) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterArticles,
          [tag],
        ),
        returnValue:
            _i3.Future<List<_i4.ArticleModel>>.value(<_i4.ArticleModel>[]),
      ) as _i3.Future<List<_i4.ArticleModel>>);
}
