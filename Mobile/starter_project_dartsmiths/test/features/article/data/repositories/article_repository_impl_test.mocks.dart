// Mocks generated by Mockito 5.4.0 from annotations
// in dartsmiths/test/features/article/data/repositories/article_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartsmiths/core/network/network_info.dart' as _i3;
import 'package:dartsmiths/features/article/data/datasources/article_remote_data_source.dart'
    as _i5;
import 'package:dartsmiths/features/article/data/models/article_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeArticleModel_0 extends _i1.SmartFake implements _i2.ArticleModel {
  _FakeArticleModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i3.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [ArticleRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockArticleRemoteDataSource extends _i1.Mock
    implements _i5.ArticleRemoteDataSource {
  MockArticleRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ArticleModel> postArticle(_i2.ArticleModel? articleModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #postArticle,
          [articleModel],
        ),
        returnValue: _i4.Future<_i2.ArticleModel>.value(_FakeArticleModel_0(
          this,
          Invocation.method(
            #postArticle,
            [articleModel],
          ),
        )),
      ) as _i4.Future<_i2.ArticleModel>);
  @override
  _i4.Future<_i2.ArticleModel> updateArticle(_i2.ArticleModel? articleModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateArticle,
          [articleModel],
        ),
        returnValue: _i4.Future<_i2.ArticleModel>.value(_FakeArticleModel_0(
          this,
          Invocation.method(
            #updateArticle,
            [articleModel],
          ),
        )),
      ) as _i4.Future<_i2.ArticleModel>);
  @override
  _i4.Future<_i2.ArticleModel> GetArticle(String? id) => (super.noSuchMethod(
        Invocation.method(
          #GetArticle,
          [id],
        ),
        returnValue: _i4.Future<_i2.ArticleModel>.value(_FakeArticleModel_0(
          this,
          Invocation.method(
            #GetArticle,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.ArticleModel>);
}
