// Mocks generated by Mockito 5.4.0 from annotations
// in dartsmiths/test/features/authentication/data/repository/auth_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartsmiths/core/error/failures.dart' as _i8;
import 'package:dartsmiths/core/network/network_info.dart' as _i4;
import 'package:dartsmiths/features/authentication/data/datasource/authentication_remote_datasource.dart'
    as _i6;
import 'package:dartsmiths/features/authentication/data/model/user_auth_credentials.dart'
    as _i2;
import 'package:dartsmiths/features/authentication/domain/entity/authentication_payload.dart'
    as _i9;
import 'package:dartsmiths/features/authentication/domain/repository/login_repository.dart'
    as _i7;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserAuthCredentialsModel_0 extends _i1.SmartFake
    implements _i2.UserAuthCredentialsModel {
  _FakeUserAuthCredentialsModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i4.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [AuthenticationRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRemoteDataSource extends _i1.Mock
    implements _i6.AuthenticationRemoteDataSource {
  MockAuthenticationRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.UserAuthCredentialsModel> login(
    dynamic username,
    dynamic password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            username,
            password,
          ],
        ),
        returnValue: _i5.Future<_i2.UserAuthCredentialsModel>.value(
            _FakeUserAuthCredentialsModel_0(
          this,
          Invocation.method(
            #login,
            [
              username,
              password,
            ],
          ),
        )),
      ) as _i5.Future<_i2.UserAuthCredentialsModel>);
}

/// A class which mocks [AuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRepository extends _i1.Mock
    implements _i7.AuthenticationRepository {
  MockAuthenticationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i8.Failure, _i9.UserAuthCredential>> login({
    required String? username,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #username: username,
            #password: password,
          },
        ),
        returnValue:
            _i5.Future<_i3.Either<_i8.Failure, _i9.UserAuthCredential>>.value(
                _FakeEither_1<_i8.Failure, _i9.UserAuthCredential>(
          this,
          Invocation.method(
            #login,
            [],
            {
              #username: username,
              #password: password,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i8.Failure, _i9.UserAuthCredential>>);
}
