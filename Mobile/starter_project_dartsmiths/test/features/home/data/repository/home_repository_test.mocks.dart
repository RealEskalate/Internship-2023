// Mocks generated by Mockito 5.4.0 from annotations
// in dartsmiths/test/features/home/data/repository/home_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartsmiths/features/home/data/datasource/home_remote.dart'
    as _i3;
import 'package:dartsmiths/features/home/domain/entity/home.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHome_0 extends _i1.SmartFake implements _i2.Home {
  _FakeHome_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRemoteDataSource extends _i1.Mock
    implements _i3.HomeRemoteDataSource {
  MockHomeRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Home> search(
    String? term,
    String? tag,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [
            term,
            tag,
          ],
        ),
        returnValue: _i4.Future<_i2.Home>.value(_FakeHome_0(
          this,
          Invocation.method(
            #search,
            [
              term,
              tag,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Home>);
  @override
  _i4.Future<_i2.Home> filterByTag(String? tag) => (super.noSuchMethod(
        Invocation.method(
          #filterByTag,
          [tag],
        ),
        returnValue: _i4.Future<_i2.Home>.value(_FakeHome_0(
          this,
          Invocation.method(
            #filterByTag,
            [tag],
          ),
        )),
      ) as _i4.Future<_i2.Home>);
}
